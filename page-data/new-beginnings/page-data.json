{"componentChunkName":"component---src-templates-blog-post-js","path":"/new-beginnings/","result":{"data":{"site":{"siteMetadata":{"title":"Pandorica"}},"markdownRemark":{"id":"43d1eebf-b6dd-57c9-960f-0e28dba3c095","excerpt":"This is my first post where I’ll describe the workflow to contribute a patch to\nlibvirt’s core C library. Libvirt uses git for version control and source code…","html":"<p>This is my first post where I’ll describe the workflow to contribute a patch to\nlibvirt’s <a href=\"http://libvirt.org/git/?p=libvirt.git;a=summary\">core C library</a>.</p>\n<p>Libvirt uses <a href=\"https://git-scm.com/\">git</a> for version control and source code\nmanagement. This post assumes that you are working on a linux machine, have git\ninstalled and have the basics(user.name, user.email etc.) setup.</p>\n<h2>The Patch Workflow</h2>\n<p>Patches are the medium of contribution when it comes to libvirt. Patches can be\nregarding anything like a simple one liner bug fix, changing docs or a large\nfeature addition. The gist of the workflow is that you send in only the parts\nwhere you have made changes(usually via email) and reviewers apply(pull in) the\npatches instead of merging in whole branches like we do in Github’s pull\nrequest based workflow. Once you have sent the patches, the maintainers or\nreviewers will give some feedback or suggest some changes, or if they are\ncomfortable with the changes you have made, they will apply the patches.\nSometimes, it might so occur that you have sent more than one patch and the\nreviewer might apply only some of your patches and might give feedback or might\neven entirely reject the other patches.</p>\n<p>Below I will outline the steps involved in sending a patch to libvirt in the\ncontext of a bugfix.</p>\n<p>Let us assume that you have found a fix to a bug numbered <strong>xyz</strong> in the bugzilla\ntracker and you are interested in sending in the fix. Firstly, you open up a\nterminal and clone the git repository obviously.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> clone git://libvirt.org/libvirt.git\n$ <span class=\"token builtin class-name\">cd</span> libvirt</code></pre></div>\n<p>Now that you have the latest source code, you are good to add in your fix. For\nfun or just as an exercise, you can try compiling the source yourself. More on\ncompiling libvirt’s source <a href=\"http://libvirt.org/compiling.html\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> checkout -t origin -b bugfix_xyz <span class=\"token comment\"># Create a new branch which tracks origin</span>\n<span class=\"token comment\"># Open your favorite text editor, add the relevent changes in your branch, do</span>\n<span class=\"token comment\"># not commit yet. Read on for more about committing your changes. Once you have</span>\n<span class=\"token comment\"># made the changes, make sure that the changes you have written don't break any</span>\n<span class=\"token comment\"># already working stuff. In case of libvirt, the least you have to do is to get</span>\n<span class=\"token comment\"># the tests to pass without any warnings. More on testing your changes against</span>\n<span class=\"token comment\"># libvirt's test suite http://libvirt.org/compiling.html</span>\n$ <span class=\"token function\">make</span> check <span class=\"token comment\"># standard test suite of libvirt</span>\n$ <span class=\"token function\">make</span> syntax-check\n$ <span class=\"token function\">make</span> -C tests valgrind <span class=\"token comment\"># checks for memory leaks and uninitialized variables.</span></code></pre></div>\n<p>Once you get all the tests to pass, you can move on to commit your changes.</p>\n<h3>Committing your changes</h3>\n<p>Once you have made the relevant changes and the tests pass after your changes,\nyou are ready to commit your changes. To do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>files that contain your changes<span class=\"token operator\">></span>\n$ <span class=\"token function\">git</span> commit -s\n<span class=\"token comment\"># The above command will open up your favorite text editor (vi by default), and</span>\n<span class=\"token comment\"># you can add in your commit message and details about the commit. The `-s`</span>\n<span class=\"token comment\"># switch is to sign off the commit.</span></code></pre></div>\n<p>However, in the development of libvirt, patches are only accepted against the\ncurrent master, and not any release version. So you need to commit on top of the\nlatest changes, which would require rebasing your branch with the origin.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> checkout master\n$ <span class=\"token function\">git</span> pull\n$ <span class=\"token function\">git</span> checkout bugfix_xyz\n$ <span class=\"token function\">git</span> pull --rebase\n<span class=\"token comment\"># The above command will sync your branch with the master, which has just been</span>\n<span class=\"token comment\"># synced with origin, and then replay your commits on top of it. This step might</span>\n<span class=\"token comment\"># require you to fix any conflicts that might occur.</span></code></pre></div>\n<p>The above steps assume that you are adding all your changes in a single commit.\nLots of people like to make incremental commits in small steps. What they will\nhave to do in order to send in a patch is to squash multiple commits into a\nsingle commit. The reason for the squashing of multiple commits is explained in\nthe next section. To squash the commits, carry out the above rebasing step and:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> rebase -i\n<span class=\"token comment\"># This will open up your favorite text editor. Pick the first commit and squash</span>\n<span class=\"token comment\"># the rest of them, i.e., change the first word on every line except the first</span>\n<span class=\"token comment\"># line to squash. This tells git that you want to squash all of commits with the</span>\n<span class=\"token comment\"># word squash into the first commit which has the word pick. Save the file and</span>\n<span class=\"token comment\"># close it, which will open up another file where you get to edit your commit</span>\n<span class=\"token comment\"># message. Edit the message accordingly and save and close it. This completes</span>\n<span class=\"token comment\"># the squashing step.</span></code></pre></div>\n<p>We are now set to generate patches out of our changes.</p>\n<h3>Creating and sending patches</h3>\n<p>Libvirt accepts changes in the form of patches. Once we have committed our\nchanges, generating patches from it is very trivial. Assumming you have\nrebased your changes on top of upstream(origin), patches are generated by:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> format-patch master</code></pre></div>\n<p>The above command will generate patches out of your commits for submission via\ne-mail. Refer the <a href=\"https://git-scm.com/docs/git-format-patch\">docs</a> for further\ndetails about the <code class=\"language-text\">format-patch</code> command.</p>\n<p>There should be a file <strong>00*.patch</strong>. It is a standard text file and you can\nopen it in your editor to have a look. It contains enough information about the\ncommit that it was generated out of like the diff, the commit message etc.,\nalong with some metadata.</p>\n<p>Coming to the reason about squashing multiple commits into a single commit, if\none reads the man page of <code class=\"language-text\">format-patch</code>, it clearly mentions that one patch\nfile is generated for one commit. Now many open-source organizations, including\nlibvirt require that compilation from source should be clean after each patch,\nand the test suite must pass as well. Also, in case of more than one patch being\nsubmitted, intermediate patches must compile and not cause failures against the\ntest suite.</p>\n<p>I’ll explain the above with an example. Suppose while creating a fix for the bug\n<code class=\"language-text\">xyz</code>, you made incremental commits <code class=\"language-text\">c1</code>, <code class=\"language-text\">c2</code> and <code class=\"language-text\">c3</code>, where <code class=\"language-text\">c1</code> and <code class=\"language-text\">c2</code>\nwere simple intermediate commites, which along with <code class=\"language-text\">c3</code> constitute the whole\nfix, i.e., source compiles and test suites pass after the commit <code class=\"language-text\">c3</code> is made.\nIf you generate patches directly without squashing, three patch files will be\ngenerated, say <code class=\"language-text\">p1</code>, <code class=\"language-text\">p2</code>, <code class=\"language-text\">p3</code> corresponding to <code class=\"language-text\">c1</code>, <code class=\"language-text\">c2</code> and <code class=\"language-text\">c3</code>. Since this\nbreaks the requirement of intermediate patches not breaking the test suites and\ncompiling cleanly, we have to squash commits <code class=\"language-text\">c1</code>, <code class=\"language-text\">c2</code> and <code class=\"language-text\">c3</code> into a single\ncommit and then generate a single patch file out of it, which would meet all the\nrequirements of a patch.</p>\n<p>However, if you are working on a big feature or bugfix, that does not make sense\nto be added in a single commit and would be difficult as well to do so, it is\nencouraged to break up the changes into a series of logical commits, provided\nthat the source compiles cleanly and the test suites pass after each commit, the\nreason behind this requirement being that the source should be such that the\n<a href=\"https://git-scm.com/docs/git-bisect\">git bisect</a> can be run to trace a broken\ncommit if any. Once you have a series of commits <code class=\"language-text\">c1</code>, <code class=\"language-text\">c2</code>, … which meet the\nabove requirement, you can generate patches out of them the same way as above;\nrebase the current branch with origin, and then use <code class=\"language-text\">git format-patch</code> to\ngenerate the patches. Multiple patch files will be created this time, each patch\ncorresponding to one commit.</p>\n<h3>A Note about using git-notes</h3>\n<p>As I said above, the <code class=\"language-text\">*.patch</code> files generated are simple text files, and can be\nviewed in any standard text editor. However, editing the patch files by hand is\ndiscouraged, for every part of the file is structured to a particular format.\nAlthough there is one place where one could edit the patch files by hand, which\nwould be between the <code class=\"language-text\">---</code> and the diffstat(which mentions what files have been\nchanged and by how many insertions and deletions etc.). Generally, this is the\nplace to add more details or notes about the patch that you don’t want to or\ncould not include in the commit message. An example of that would be to simply\nlist down the changes being made in the current version of the patch as compared\nto the previous versions of the patches, or adding a note regarding something\nthat has to be done in the future etc. Again, one must be careful with editing\npatch files in the text editor, even for the purpose of adding notes. Instead,\nwhat one could do, and what one should do is, to keep in mind the fact that git\nis awesome and use the built-in tool that git comes along with, <em>git-notes</em>.</p>\n<p>From the <a href=\"https://git-scm.com/docs/git-notes\">docs</a> of git-notes, git-notes\nadds, removes, or reads notes attached to objects, without touching the\nobjects themselves. You can refer to the docs itself for more description and\nexamples, although I will give a brief rundown of how to use git-notes to add\nnotes to your patches. Say you want to generate patches for a series of commits\n<code class=\"language-text\">c1</code>, <code class=\"language-text\">c2</code>, … and want to add notes in the patch files that will be generated.\nTo do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> notes <span class=\"token function\">add</span> <span class=\"token operator\">&lt;</span>sha of the commit you want to <span class=\"token function\">add</span> notes to<span class=\"token operator\">></span>\n<span class=\"token comment\"># The above will open up a text editor and you can start writing a note. Once</span>\n<span class=\"token comment\"># you are done, save it and the note will be saved corresponding to that commit.</span>\n<span class=\"token comment\"># If you are generating patch for a single commit, then you can omit the &lt;sha></span>\n<span class=\"token comment\"># assuming that the HEAD is pointing to the commit you want to add a note to.</span>\n<span class=\"token comment\"># Repeat the above command for all the commits that you want to add a note to.</span>\n<span class=\"token comment\"># Next, generate the patches the same way as above, but pass a --notes option to</span>\n<span class=\"token comment\"># tell git to add the notes from commits to their corresponding patch files.</span>\n$ <span class=\"token function\">git</span> format-patch master --notes <span class=\"token comment\"># As taken from the docs</span>\n<span class=\"token comment\"># The above command will generate the patches as done earlier, but also tell git</span>\n<span class=\"token comment\"># to add notes saved for the commit sha's to the corresponding patch files. You</span>\n<span class=\"token comment\"># can open the patch files and observe that the notes have been added after the</span>\n<span class=\"token comment\"># --- and before the diffstat.</span></code></pre></div>\n<p>Once you have the patch[es] ready, submit them to the libvirt’s mailing list by\n<code class=\"language-text\">git send-email</code>. Some linux distros require you to install a separate package\n<code class=\"language-text\">git-email</code> to be able to use this command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># First, we configure the email specifics</span>\n$ <span class=\"token function\">git</span> config sendemail.smtpuser <span class=\"token operator\">&lt;</span>email<span class=\"token operator\">></span>\n$ <span class=\"token function\">git</span> config sendemail.smtpserver <span class=\"token operator\">&lt;</span>your smtp server<span class=\"token operator\">></span> <span class=\"token comment\"># eg., smpt.gmail.com</span>\n$ <span class=\"token function\">git</span> config sendemail.smtpencryption tls <span class=\"token comment\"># or ssl</span>\n$ <span class=\"token function\">git</span> config sendemail.smtpserverport <span class=\"token number\">587</span> <span class=\"token comment\"># 465 for ssl</span>\n$ <span class=\"token function\">git</span> config sendemail.to libvir-list@redhat.com <span class=\"token comment\"># mailing list to send patches</span></code></pre></div>\n<p>Having configured that, send the patches simply by:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">git</span> send-email --cover-letter --annotate --no-chain-reply-to *.patch\n<span class=\"token comment\"># Omit the --cover-letter if you are sending a single patch</span></code></pre></div>\n<p>Refer the docs for <a href=\"https://git-scm.com/docs/git-send-email\">send-email</a> for\nmore info on the options.</p>\n<p>And that is it; this will send your patch to the mailing list. If you receive\nany feedback or comments, modify accordingly and follow the same procedure to\ngenerate the patches. In the <code class=\"language-text\">format-patch</code> step, add\n<code class=\"language-text\">--subject-prefix=&quot;PATCH v2&quot;</code> to create the second version of the patches.</p>\n<p>Please send across a <a href=\"mailto:nishithshah.2211@gmail.com\">mail</a> if there is any\nerror in this post or a step is described wrongly.</p>","frontmatter":{"title":"Git workflow for contributing to libvirt","date":"May 07, 2016","description":"Notes on git workflow for contributing to Libvirt"}}},"pageContext":{"slug":"/new-beginnings/","previous":null,"next":null}}}